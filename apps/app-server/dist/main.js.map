{"mappings":"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","sources":["src/index.ts","src/server.ts","src/routes/gc-tts.ts","src/controllers/gc-tts.ts","src/utils/requests.ts","src/routes/ma-tts.ts","src/controllers/ma-tts.ts"],"sourcesContent":["import izabelaServer from './server'\n\nconst args = process.argv.slice(2)\nif (args.includes('--start-server')) {\n  izabelaServer.startServer()\n}\n\nmodule.exports = izabelaServer\n","import express from 'express'\nimport bodyParser from 'body-parser'\nimport cors from 'cors'\nimport logger from 'morgan'\nimport path from 'path'\nimport { defaultsDeep } from 'lodash'\nimport { registerGCTTSRoutes } from './routes/gc-tts'\nimport { registerMATTSRoutes } from './routes/ma-tts'\n\nconst app = express()\napp.use(cors())\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: true }))\nif (process.env.NODE_ENV === 'development') {\n  app.use(logger('dev'))\n}\n\nclass IzabelaServer {\n  public server = null\n  private config = null\n  private defaultConfig = {\n    tempPath: path.resolve('temp'),\n    port: 7070,\n  }\n\n  async startApp() {\n    this.server = app.listen(this.getConfig().port, () => {\n      const port = this.server.address().port\n      console.log('App server now running on port', port)\n    })\n  }\n\n  async startRouter() {\n    const context = { app, server: this.server }\n    registerGCTTSRoutes(context)\n    registerMATTSRoutes(context)\n  }\n\n  async startServer(config = {}) {\n    this.config = defaultsDeep(config, this.defaultConfig)\n    await this.startRouter()\n    await this.startApp()\n  }\n\n  getConfig() {\n    return this.config || this.defaultConfig\n  }\n}\n\nconst izabelaServer = new IzabelaServer()\nexport default izabelaServer\n","import {\n  listVoicesHandler,\n  synthesizeSpeechHandler,\n} from '../controllers/gc-tts'\n\nexport const registerGCTTSRoutes = ({ app }) => {\n  app.post('/api/tts/google-cloud/list-voices', listVoicesHandler)\n  app.post('/api/tts/google-cloud/synthesize-speech', synthesizeSpeechHandler)\n}\n","import { handleError } from '../utils/requests'\nimport axios from 'axios'\n\nimport { v4 as uuid } from 'uuid'\nimport izabelaServer from '../server'\n\nconst path = require('path')\nconst util = require('util')\nconst fs = require('fs')\n\nexport const listVoicesHandler = async (\n  {\n    body: {\n      credentials: { apiKey },\n    },\n  },\n  res,\n) => {\n  try {\n    const {\n      data: { voices },\n    } = await axios.get(\n      `https://texttospeech.googleapis.com/v1beta1/voices?key=${apiKey}`,\n    )\n    res.status(200).json(voices)\n  } catch (e) {\n    handleError(res, 'Internal server error', e.message, 500)\n  }\n}\n\nexport const synthesizeSpeechHandler = async (\n  {\n    body: {\n      credentials: { apiKey },\n      payload,\n    },\n  },\n  res,\n) => {\n  const outputFile = path.join(\n    izabelaServer.getConfig().tempPath,\n    uuid() + '.mp3',\n  )\n  try {\n    fs.mkdirSync(path.parse(outputFile).dir, { recursive: true }, (err) => {\n      if (err) throw err\n    })\n    fs.writeFileSync(outputFile, '')\n    const {\n      data: { audioContent },\n    } = await axios.post(\n      `https://texttospeech.googleapis.com/v1beta1/text:synthesize?key=${apiKey}`,\n      payload,\n    )\n    const writeFile = util.promisify(fs.writeFile)\n\n    await writeFile(outputFile, Buffer.from(audioContent, 'base64'), 'binary')\n    const stat = fs.statSync(outputFile)\n    const total = stat.size\n\n    res.writeHead(200, { 'Content-Length': total, 'Content-Type': 'audio/mp3' })\n    const stream = fs.createReadStream(outputFile).pipe(res)\n    stream.on('finish', () => {\n      fs.unlinkSync(outputFile)\n    })\n  } catch (e) {\n    if (fs.existsSync(outputFile)) {\n      fs.unlinkSync(outputFile)\n    }\n    handleError(res, 'Internal server error', e.message, 500)\n  }\n}\n","export const handleError = (res, reason, message, code) => {\r\n  console.log('ERROR: ' + reason, message)\r\n  if (process.env.NODE_ENV === 'production' && code === 500) {\r\n    return res.status(500).json({ error: reason })\r\n  }\r\n  return res.status(code || 500).json({ error: message })\r\n}\r\n","import {\n  listVoicesHandler,\n  synthesizeSpeechHandler,\n} from '../controllers/ma-tts'\n\nexport const registerMATTSRoutes = ({ app }) => {\n  app.post('/api/tts/microsoft-azure/list-voices', listVoicesHandler)\n  app.post(\n    '/api/tts/microsoft-azure/synthesize-speech',\n    synthesizeSpeechHandler,\n  )\n}\n","import {\n  AudioConfig,\n  SpeechConfig,\n  SpeechSynthesisOutputFormat,\n  SpeechSynthesizer,\n} from 'microsoft-cognitiveservices-speech-sdk'\nimport { handleError } from '../utils/requests'\nimport axios from 'axios'\n\nimport { v4 as uuid } from 'uuid'\nimport izabelaServer from '../server'\n\nconst path = require('path')\nconst util = require('util')\nconst fs = require('fs')\n\nexport const listVoicesHandler = async (\n  {\n    body: {\n      credentials: { apiKey, region },\n    },\n  },\n  res,\n) => {\n  try {\n    const endpoint = `https://${region}.tts.speech.${\n      region.startsWith('china') ? 'azure.cn' : 'microsoft.com'\n    }/cognitiveservices/voices/list`\n    const { data: voices } = await axios.get(endpoint, {\n      headers: {\n        'Ocp-Apim-Subscription-Key': apiKey,\n      },\n    })\n    res.status(200).json(voices)\n  } catch (e) {\n    handleError(res, 'Internal server error', e.message, 500)\n  }\n}\n\nexport const synthesizeSpeechHandler = async (\n  {\n    body: {\n      credentials: { apiKey, region },\n      payload: { text, voice },\n    },\n  },\n  res,\n) => {\n  const outputFile = path.join(\n    izabelaServer.getConfig().tempPath,\n    uuid() + '.mp3',\n  )\n  try {\n    fs.mkdirSync(path.parse(outputFile).dir, { recursive: true }, (err) => {\n      if (err) throw err\n    })\n    fs.writeFileSync(outputFile, '')\n\n    const speechConfig = SpeechConfig.fromSubscription(apiKey, region)\n    speechConfig.speechSynthesisLanguage = voice.Locale\n    speechConfig.speechSynthesisVoiceName = voice.ShortName\n    speechConfig.speechSynthesisOutputFormat =\n      SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3\n    const audioConfig = AudioConfig.fromAudioFileOutput(outputFile)\n\n    const synthesizer = new SpeechSynthesizer(speechConfig, audioConfig)\n    const audioContent: ArrayBuffer = await new Promise((resolve, reject) => {\n      synthesizer.speakTextAsync(\n        text,\n        (result) => {\n          resolve(result.audioData)\n          synthesizer.close()\n        },\n        (error) => {\n          reject(error)\n          synthesizer.close()\n        },\n      )\n    })\n\n    const writeFile = util.promisify(fs.writeFile)\n\n    await writeFile(outputFile, Buffer.from(audioContent), 'binary')\n    const stat = fs.statSync(outputFile)\n    const total = stat.size\n\n    res.writeHead(200, { 'Content-Length': total, 'Content-Type': 'audio/mp3' })\n    const stream = fs.createReadStream(outputFile).pipe(res)\n    stream.on('finish', () => {\n      fs.unlinkSync(outputFile)\n    })\n  } catch (e) {\n    if (fs.existsSync(outputFile)) {\n      fs.unlinkSync(outputFile)\n    }\n    handleError(res, 'Internal server error', e.message, 500)\n  }\n}\n"],"names":[],"version":3,"file":"main.js.map","sourceRoot":"../"}
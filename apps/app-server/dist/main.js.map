{"mappings":"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","sources":["apps/app-server/src/index.ts","apps/app-server/src/server.ts","apps/app-server/src/routes/gc-tts.ts","apps/app-server/src/controllers/gc-tts.ts","apps/app-server/src/utils/requests.ts"],"sourcesContent":["import izabelaServer from './server'\r\n\r\n// if (!module.parent) {\r\n//     izabelaServer.startServer()\r\n// }\r\n\r\nmodule.exports = izabelaServer\r\n","import express from \"express\"\r\nimport bodyParser from \"body-parser\"\r\nimport cors from \"cors\"\r\nimport logger from 'morgan'\r\nimport { registerGCTTSRoutes } from './routes/gc-tts'\r\nimport path from 'path'\r\nimport { defaultsDeep } from 'lodash'\r\n\r\nconst app = express()\r\napp.use(cors())\r\napp.use(bodyParser.json())\r\napp.use(bodyParser.urlencoded({ extended: true }))\r\nif (process.env.NODE_ENV === 'development') {\r\n    app.use(logger('dev'))\r\n}\r\n\r\nclass IzabelaServer {\r\n    public server = null\r\n    private config = null\r\n    private defaultConfig = {\r\n        tempPath: path.resolve('temp'),\r\n        port: 7070,\r\n    }\r\n\r\n    async startApp() {\r\n        this.server = app.listen(this.getConfig().port, () => {\r\n            const port = this.server.address().port\r\n            console.log(\"App server now running on port\", port)\r\n        })\r\n    }\r\n\r\n    async startRouter() {\r\n        const context = { app, server: this.server }\r\n        registerGCTTSRoutes(context)\r\n    }\r\n\r\n    async startServer(config = {}) {\r\n        this.config = defaultsDeep(config, this.defaultConfig)\r\n        await this.startRouter()\r\n        await this.startApp()\r\n    }\r\n\r\n    getConfig() {\r\n        return this.config || this.defaultConfig\r\n    }\r\n}\r\n\r\nconst izabelaServer = new IzabelaServer()\r\nexport default izabelaServer\r\n","import { listVoicesHandler, synthesizeSpeechHandler } from \"../controllers/gc-tts\"\r\n\r\nexport const registerGCTTSRoutes = ({ app }) => {\r\n    app.post(\"/api/gc-tts/list-voices\", listVoicesHandler)\r\n    app.post(\"/api/gc-tts/synthesize-speech\", synthesizeSpeechHandler)\r\n}\r\n","import { handleError } from '../utils/requests'\r\nimport axios from 'axios'\r\n\r\nimport { v4 as uuid } from 'uuid'\r\nimport izabelaServer from '../server'\r\n\r\nconst path = require('path')\r\nconst util = require('util')\r\nconst fs = require('fs')\r\n\r\nexport const listVoicesHandler = async ({ body: { apiKey } }, res, next) => {\r\n    try {\r\n        const { data: { voices } } = await axios.get(`https://texttospeech.googleapis.com/v1beta1/voices?key=${ apiKey }`)\r\n        res.status(200).json(voices)\r\n    } catch (e) {\r\n        handleError(res, \"Internal server error\", e.message, 500)\r\n    }\r\n}\r\n\r\nexport const synthesizeSpeechHandler = async ({ body: { apiKey, ...rest } }, res) => {\r\n    const outputFile = path.join(izabelaServer.getConfig().tempPath, uuid()+'.mp3')\r\n    try {\r\n        fs.mkdirSync(path.parse(outputFile).dir, { recursive: true }, (err) => {\r\n            if (err) throw err\r\n        })\r\n        fs.writeFileSync(outputFile, '')\r\n        const { data: { audioContent } } = await axios.post(`https://texttospeech.googleapis.com/v1beta1/text:synthesize?key=${ apiKey }`, rest)\r\n        const writeFile = util.promisify(fs.writeFile)\r\n\r\n        await writeFile(outputFile, Buffer.from(audioContent, 'base64'), 'binary')\r\n        const stat = fs.statSync(outputFile)\r\n        const total = stat.size\r\n\r\n        res.writeHead(200, { 'Content-Length': total, 'Content-Type': 'audio/mp3' })\r\n        const stream = fs.createReadStream(outputFile).pipe(res)\r\n        stream.on('finish', () => {\r\n            fs.unlinkSync(outputFile)\r\n        })\r\n    } catch (e) {\r\n        if (fs.existsSync(outputFile)) {\r\n            fs.unlinkSync(outputFile)\r\n        }\r\n        handleError(res, \"Internal server error\", e.message, 500)\r\n    }\r\n}\r\n","export const handleError = (res, reason, message, code) => {\r\n    console.log(\"ERROR: \"+reason, message)\r\n    if (process.env.NODE_ENV === 'production' && code === 500) {\r\n        return res.status(500).json({ \"error\": reason })\r\n    }\r\n    return res.status(code || 500).json({ \"error\": message })\r\n}\r\n"],"names":[],"version":3,"file":"main.js.map","sourceRoot":"../../../"}
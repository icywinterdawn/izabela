{"mappings":"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","sources":["apps/app-server/src/index.ts","apps/app-server/src/server.ts","apps/app-server/src/routes/gc-tts.ts","apps/app-server/src/controllers/gc-tts.ts","apps/app-server/src/utils/requests.ts"],"sourcesContent":["import izabelaServer from './server'\n\n// izabelaServer.startServer()\n\nmodule.exports = izabelaServer\n","import express from \"express\"\r\nimport bodyParser from \"body-parser\"\r\nimport cors from \"cors\"\r\nimport logger from 'morgan'\r\nimport { registerGCTTSRoutes } from './routes/gc-tts'\r\nimport path from 'path'\r\nimport { defaultsDeep } from 'lodash'\r\n\r\nconst app = express()\r\napp.use(cors())\r\napp.use(bodyParser.json())\r\napp.use(bodyParser.urlencoded({ extended: true }))\r\nif (process.env.NODE_ENV === 'development') {\r\n    app.use(logger('dev'))\r\n}\r\n\r\nclass IzabelaServer {\r\n    public server = null\r\n    private config = null\r\n    private defaultConfig = {\r\n        tempPath: path.resolve('temp'),\r\n        port: 7070,\r\n    }\r\n\r\n    async startApp() {\r\n        this.server = app.listen(this.getConfig().port, () => {\r\n            const port = this.server.address().port\r\n            console.log(\"App server now running on port\", port)\r\n        })\r\n    }\r\n\r\n    async startRouter() {\r\n        const context = { app, server: this.server }\r\n        registerGCTTSRoutes(context)\r\n    }\r\n\r\n    async startServer(config = {}) {\r\n        this.config = defaultsDeep(config, this.defaultConfig)\r\n        await this.startRouter()\r\n        await this.startApp()\r\n    }\r\n\r\n    getConfig() {\r\n        return this.config || this.defaultConfig\r\n    }\r\n}\r\n\r\nconst izabelaServer = new IzabelaServer()\r\nexport default izabelaServer\r\n","import {\n  listVoicesHandler,\n  synthesizeSpeechHandler,\n} from '../controllers/gc-tts'\n\nexport const registerGCTTSRoutes = ({ app }) => {\n  app.post('/api/tts/google-cloud/list-voices', listVoicesHandler)\n  app.post('/api/tts/google-cloud/synthesize-speech', synthesizeSpeechHandler)\n}\n","import { handleError } from '../utils/requests'\nimport axios from 'axios'\n\nimport { v4 as uuid } from 'uuid'\nimport izabelaServer from '../server'\n\nconst path = require('path')\nconst util = require('util')\nconst fs = require('fs')\n\nexport const listVoicesHandler = async (\n  {\n    body: {\n      credentials: { apiKey },\n    },\n  },\n  res,\n  next,\n) => {\n  try {\n    const {\n      data: { voices },\n    } = await axios.get(\n      `https://texttospeech.googleapis.com/v1beta1/voices?key=${apiKey}`,\n    )\n    res.status(200).json(voices)\n  } catch (e) {\n    handleError(res, 'Internal server error', e.message, 500)\n  }\n}\n\nexport const synthesizeSpeechHandler = async (\n  {\n    body: {\n      credentials: { apiKey },\n      payload,\n    },\n  },\n  res,\n) => {\n  const outputFile = path.join(\n    izabelaServer.getConfig().tempPath,\n    uuid() + '.mp3',\n  )\n  try {\n    fs.mkdirSync(path.parse(outputFile).dir, { recursive: true }, (err) => {\n      if (err) throw err\n    })\n    fs.writeFileSync(outputFile, '')\n    const {\n      data: { audioContent },\n    } = await axios.post(\n      `https://texttospeech.googleapis.com/v1beta1/text:synthesize?key=${apiKey}`,\n      payload,\n    )\n    const writeFile = util.promisify(fs.writeFile)\n\n    await writeFile(outputFile, Buffer.from(audioContent, 'base64'), 'binary')\n    const stat = fs.statSync(outputFile)\n    const total = stat.size\n\n    res.writeHead(200, { 'Content-Length': total, 'Content-Type': 'audio/mp3' })\n    const stream = fs.createReadStream(outputFile).pipe(res)\n    stream.on('finish', () => {\n      fs.unlinkSync(outputFile)\n    })\n  } catch (e) {\n    if (fs.existsSync(outputFile)) {\n      fs.unlinkSync(outputFile)\n    }\n    handleError(res, 'Internal server error', e.message, 500)\n  }\n}\n","export const handleError = (res, reason, message, code) => {\r\n  console.log('ERROR: ' + reason, message)\r\n  if (process.env.NODE_ENV === 'production' && code === 500) {\r\n    return res.status(500).json({ error: reason })\r\n  }\r\n  return res.status(code || 500).json({ error: message })\r\n}\r\n"],"names":[],"version":3,"file":"main.js.map","sourceRoot":"../../../"}
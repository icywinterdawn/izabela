{"mappings":"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","sources":["libs/generate-exports-webpack-plugin/src/index.ts"],"sourcesContent":["import {Options, PluginOptions} from \"./types\";\r\nimport chokidar from 'chokidar';\r\nimport path from 'path';\r\nimport fs from 'fs/promises';\r\nimport globby from 'globby';\r\n\r\nclass GenerateExportsWebpackPlugin {\r\n    defaultOptions: PluginOptions = {\r\n        omitExtensionInExportPath: true,\r\n        filename: 'index.js',\r\n        include: [],\r\n        exclude: [],\r\n        directories: [],\r\n    };\r\n    options!: PluginOptions;\r\n    constructor(options = {}) {\r\n        this.options = { ...this.defaultOptions, ...options };\r\n    }\r\n    apply() {\r\n        this.options.directories.forEach((directoryConfig) => {\r\n            const directoryConfigIsArray = Array.isArray(directoryConfig);\r\n            let directory = directoryConfigIsArray ? directoryConfig[0] : directoryConfig;\r\n            let options = directoryConfigIsArray ? { ...this.defaultOptions, ...(directoryConfig[1] || this.options) } : this.options;\r\n            if (!path.isAbsolute(directory)) directory = path.resolve(directory);\r\n\r\n            const watcher = chokidar.watch(options.include, {\r\n                ignored: /^\\./,\r\n                cwd: directory,\r\n            });\r\n\r\n            watcher\r\n                .on('add', (filePath) => this.handleFileChange(filePath, directory, options))\r\n                .on('unlink', (filePath) => this.handleFileChange(filePath, directory, options))\r\n                .on('ready', () => this.handleFileChange('', directory, options));\r\n        });\r\n    }\r\n\r\n    handleFileChange(filePath: string, directory, options) {\r\n        if (filePath !== path.join(directory, options.filename)) {\r\n            this.generateIndex(directory, options);\r\n        }\r\n    }\r\n\r\n    btfs(path: string): string {\r\n        return path.replace(/\\\\/g, \"/\");\r\n    }\r\n\r\n    async fileExists(path: string) { return !!(await fs.stat(path).catch(e => false))}\r\n\r\n    generateIndex(directory: string, options: PluginOptions | Options) {\r\n        if (!path.isAbsolute(directory)) directory = path.resolve(directory);\r\n        const {btfs} = this;\r\n        const {filename, include, exclude} = options;\r\n        const indexPath = btfs(path.join(directory, filename))\r\n        globby(include, {\r\n            cwd: directory,\r\n            ignore: exclude,\r\n        })\r\n            .then((files) => {\r\n                const indexTemplate = this.getTemplate(directory, options, files)\r\n                return this\r\n                    .fileExists(indexPath)\r\n                    .then(async (exists) => {\r\n                        if (exists) {\r\n                            const fileContent = await fs.readFile(indexPath, \"utf8\");\r\n                            if (fileContent === indexTemplate) return Promise.reject('Contents are identical.');\r\n                        }\r\n                        return fs.mkdir(path.parse(indexPath).dir, {recursive: true})\r\n                    })\r\n                    .then(() => fs.writeFile(indexPath, indexTemplate))\r\n            })\r\n            .catch(() => {})\r\n    }\r\n\r\n    getTemplate(directory: string, options: PluginOptions | Options, files: string[]) {\r\n        const {btfs} = this;\r\n        const {omitExtensionInExportPath} = options;\r\n        return `/**\r\n  This file is auto-generated by GenerateIndexWebpackPlugin.\r\n  Check this file into source control.\r\n  Do not edit this file.\r\n  Bother Noah for more information :(\r\n**/\\n${\r\n            files.map((filePath) => {\r\n                const {name} = path.parse(filePath);\r\n                const exportRelativePath = btfs(\r\n                    btfs(filePath)\r\n                        .replace(btfs(directory), '')\r\n                        .replace(omitExtensionInExportPath ? /\\.[^/.]+$/ : '', '')\r\n                );\r\n                return `export { default as ${name} } from '${\r\n                    exportRelativePath.startsWith('/') ? '.' + exportRelativePath : './' + exportRelativePath\r\n                }';`\r\n            }).join('\\n')\r\n        }\\n/** End of auto-generated content **/\\n`;\r\n    }\r\n}\r\n\r\nmodule.exports = GenerateExportsWebpackPlugin\r\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../../../"}
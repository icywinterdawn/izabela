{"mappings":"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","sources":["libs/generate-exports-webpack-plugin/src/index.ts"],"sourcesContent":["import chokidar from 'chokidar'\r\nimport path from 'path'\r\nimport fs from 'fs/promises'\r\nimport globby from 'globby'\r\nimport { Options, PluginOptions } from './types'\r\n\r\nclass GenerateExportsWebpackPlugin {\r\n  defaultOptions: PluginOptions = {\r\n    omitExtension: true,\r\n    omitSemi: false,\r\n    singleQuote: true,\r\n    filename: 'index.js',\r\n    include: [],\r\n    exclude: [],\r\n    directories: [],\r\n  }\r\n\r\n  options!: PluginOptions[]\r\n\r\n  constructor(options: Partial<PluginOptions> | Partial<PluginOptions>[] = []) {\r\n    if (!Array.isArray(options)) {\r\n      this.options = [{ ...this.defaultOptions, ...options }]\r\n    } else {\r\n      this.options = options.map((option) => ({\r\n        ...this.defaultOptions,\r\n        ...option,\r\n      }))\r\n    }\r\n  }\r\n\r\n  apply() {\r\n    this.options.forEach((option, optionIndex) => {\r\n      option.directories.forEach((directoryConfig) => {\r\n        const directoryConfigIsArray = Array.isArray(directoryConfig)\r\n        let directory = directoryConfigIsArray\r\n          ? directoryConfig[0]\r\n          : directoryConfig\r\n        const options = directoryConfigIsArray\r\n          ? { ...this.options[optionIndex], ...(directoryConfig[1] || {}) }\r\n          : this.options[optionIndex]\r\n        if (!path.isAbsolute(directory)) directory = path.resolve(directory)\r\n        if (process.env.NODE_ENV === 'production') {\r\n          return this.generateIndex(directory, options)\r\n        }\r\n        const watcher = chokidar.watch(options.include, {\r\n          ignored: /^\\./,\r\n          cwd: directory,\r\n        })\r\n\r\n        watcher\r\n          .on('add', (filePath) =>\r\n            this.handleFileChange(filePath, directory, options),\r\n          )\r\n          .on('unlink', (filePath) =>\r\n            this.handleFileChange(filePath, directory, options),\r\n          )\r\n          .on('ready', () => this.handleFileChange('', directory, options))\r\n      })\r\n    })\r\n  }\r\n\r\n  handleFileChange(filePath: string, directory, options) {\r\n    if (filePath !== path.join(directory, options.filename)) {\r\n      this.generateIndex(directory, options)\r\n    }\r\n  }\r\n\r\n  btfs(path: string): string {\r\n    return path.replace(/\\\\/g, '/')\r\n  }\r\n\r\n  async fileExists(path: string) {\r\n    return !!(await fs.stat(path).catch((e) => false))\r\n  }\r\n\r\n  generateIndex(directory: string, options: PluginOptions | Options) {\r\n    if (!path.isAbsolute(directory)) directory = path.resolve(directory)\r\n    const { btfs } = this\r\n    const { filename, include, exclude } = options\r\n    const indexPath = btfs(path.join(directory, filename))\r\n    globby(include, {\r\n      cwd: directory,\r\n      ignore: exclude,\r\n    })\r\n      .then((files) => {\r\n        const filteredFiles = files.filter((file) => file !== filename)\r\n        const indexTemplate = this.getTemplate(\r\n          directory,\r\n          options,\r\n          filteredFiles,\r\n        )\r\n        return this.fileExists(indexPath)\r\n          .then(async (exists) => {\r\n            if (exists) {\r\n              const fileContent = await fs.readFile(indexPath, 'utf8')\r\n              if (fileContent === indexTemplate)\r\n                return Promise.reject('Contents are identical.')\r\n            }\r\n            return fs.mkdir(path.parse(indexPath).dir, { recursive: true })\r\n          })\r\n          .then(() => fs.writeFile(indexPath, indexTemplate))\r\n      })\r\n      .catch(() => {})\r\n  }\r\n\r\n  getTemplate(\r\n    directory: string,\r\n    options: PluginOptions | Options,\r\n    files: string[],\r\n  ) {\r\n    const { btfs } = this\r\n    const { omitExtension, omitSemi, singleQuote } = options\r\n    const quoteType = singleQuote ? \"'\" : '\"'\r\n    return `/**\r\n * This file is auto-generated by GenerateExportsWebpackPlugin.\r\n * Check this file into source control.\r\n * Do not edit this file.\r\n */\\n${files\r\n   .sort((a, b) => a.localeCompare(b))\r\n   .map((filePath) => {\r\n     const { name } = path.parse(filePath)\r\n     const exportRelativePath = btfs(\r\n       btfs(filePath)\r\n         .replace(btfs(directory), '')\r\n         .replace(omitExtension ? /\\.[^/.]+$/ : '', ''),\r\n     )\r\n     return `export { default as ${name} } from ${quoteType}${\r\n       exportRelativePath.startsWith('/')\r\n         ? `.${exportRelativePath}`\r\n         : `./${exportRelativePath}`\r\n     }${quoteType}${omitSemi ? '' : ';'}`\r\n   })\r\n   .join('\\n')}\\n/* End of auto-generated content. */\\n`\r\n  }\r\n}\r\n\r\nmodule.exports = GenerateExportsWebpackPlugin\r\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../../../"}
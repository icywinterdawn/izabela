{"mappings":";;;;;;;;;;;;MAMM,kDAA4B;gBAalB,QAAO,GAAG,CAAC;IAAA,CAAC,CAAE,CAAC;QAb/B,IAmHC,CAlHG,cAAc,GAAkB,CAAC;YAC7B,aAAa,EAAE,IAAI;YACnB,QAAQ,EAAE,KAAK;YACf,WAAW,EAAE,IAAI;YACjB,QAAQ,EAAE,CAAU;YACpB,OAAO,EAAE,CAAC,CAAC;YACX,OAAO,EAAE,CAAC,CAAC;YACX,WAAW,EAAE,CAAC,CAAC;QACnB,CAAC;QAKG,IAAI,CAAC,OAAO,GAAG,CAAC;eAAI,IAAI,CAAC,cAAc;eAAK,QAAO;QAAC,CAAC;IACzD,CAAC;IAED,KAAK,GAAG,CAAC;QACL,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,EAAE,eAAe,GAAK,CAAC;YACnD,KAAK,CAAC,sBAAsB,GAAG,KAAK,CAAC,OAAO,CAAC,eAAe;YAC5D,GAAG,CAAC,SAAS,GAAG,sBAAsB,GAChC,eAAe,CAAC,CAAC,IACjB,eAAe;YACrB,KAAK,CAAC,OAAO,GAAG,sBAAsB,GAChC,CAAC;mBAAI,IAAI,CAAC,cAAc;mBAAM,eAAe,CAAC,CAAC,KAAK,IAAI,CAAC,OAAO;YAAE,CAAC,GACnE,IAAI,CAAC,OAAO;YAClB,EAAE,GAAG,qCAAI,CAAC,UAAU,CAAC,SAAS,GAAG,SAAS,GAAG,qCAAI,CAAC,OAAO,CAAC,SAAS;YACnE,EAAE,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,CAAY,aACrC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,OAAO;YAEhD,KAAK,CAAC,OAAO,GAAG,yCAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;gBAC7C,OAAO;gBACP,GAAG,EAAE,SAAS;YAClB,CAAC;YAED,OAAO,CACF,EAAE,CAAC,CAAK,OAAG,QAAQ,GAChB,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,SAAS,EAAE,OAAO;cAErD,EAAE,CAAC,CAAQ,UAAG,QAAQ,GACnB,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,SAAS,EAAE,OAAO;cAErD,EAAE,CAAC,CAAO,YAAQ,IAAI,CAAC,gBAAgB,CAAC,CAAE,GAAE,SAAS,EAAE,OAAO;;QACvE,CAAC;IACL,CAAC;IAED,gBAAgB,CAAC,SAAgB,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC;QACpD,EAAE,EAAE,SAAQ,KAAK,qCAAI,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,QAAQ,GAClD,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,OAAO;IAE7C,CAAC;IAED,IAAI,CAAC,IAAY,EAAU,CAAC;QACxB,MAAM,CAAC,IAAI,CAAC,OAAO,QAAQ,CAAG;IAClC,CAAC;UAEK,UAAU,CAAC,KAAY,EAAE,CAAC;QAC5B,MAAM,GAAI,KAAK,CAAC,2CAAE,CAAC,IAAI,CAAC,KAAI,EAAE,KAAK,EAAE,CAAC,GAAK,KAAK;;IACpD,CAAC;IAED,aAAa,CAAC,UAAiB,EAAE,QAAgC,EAAE,CAAC;QAChE,EAAE,GAAG,qCAAI,CAAC,UAAU,CAAC,UAAS,GAAG,UAAS,GAAG,qCAAI,CAAC,OAAO,CAAC,UAAS;QACnE,KAAK,CAAC,CAAC,OAAC,IAAI,EAAC,CAAC,GAAG,IAAI;QACrB,KAAK,CAAC,CAAC,WAAC,QAAQ,YAAE,OAAO,YAAE,OAAO,EAAC,CAAC,GAAG,QAAO;QAC9C,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC,qCAAI,CAAC,IAAI,CAAC,UAAS,EAAE,QAAQ;QACpD,uCAAM,CAAC,OAAO,EAAE,CAAC;YACb,GAAG,EAAE,UAAS;YACd,MAAM,EAAE,OAAO;QACnB,CAAC,EACI,IAAI,EAAE,KAAK,GAAK,CAAC;YACd,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,UAAS,EAAE,QAAO,EAAE,KAAK;YAChE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,EAC3B,IAAI,QAAQ,MAAM,GAAK,CAAC;gBACrB,EAAE,EAAE,MAAM,EAAE,CAAC;oBACT,KAAK,CAAC,WAAW,GAAG,KAAK,CAAC,2CAAE,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAM;oBACvD,EAAE,EAAE,WAAW,KAAK,aAAa,EAC7B,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAyB;gBACvD,CAAC;gBACD,MAAM,CAAC,2CAAE,CAAC,KAAK,CAAC,qCAAI,CAAC,KAAK,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC;oBAAC,SAAS,EAAE,IAAI;gBAAC,CAAC;YAClE,CAAC,EACA,IAAI,KAAO,2CAAE,CAAC,SAAS,CAAC,SAAS,EAAE,aAAa;;QACzD,CAAC,EACA,KAAK,KAAO,CAAC;QACd,CAAC;IACT,CAAC;IAED,WAAW,CACP,UAAiB,EACjB,QAAgC,EAChC,KAAe,EACjB,CAAC;QACC,KAAK,CAAC,CAAC,OAAC,IAAI,EAAC,CAAC,GAAG,IAAI;QACrB,KAAK,CAAC,CAAC,gBAAC,aAAa,aAAE,QAAQ,gBAAE,WAAW,EAAC,CAAC,GAAG,QAAO;QACxD,KAAK,CAAC,SAAS,GAAG,WAAW,GAAG,CAAG,KAAG,CAAG;QACzC,MAAM,EAAE,uIAIZ,EAAG,KAAK,CACC,IAAI,EAAE,CAAC,EAAE,CAAC,GAAK,CAAC,CAAC,aAAa,CAAC,CAAC;UAChC,GAAG,EAAE,QAAQ,GAAK,CAAC;YAChB,KAAK,CAAC,CAAC,OAAC,IAAI,EAAC,CAAC,GAAG,yDAAI,CAAC,KAAK,CAAC,QAAQ;YACpC,KAAK,CAAC,kBAAkB,GAAG,IAAI,CAC3B,IAAI,CAAC,QAAQ,EACR,OAAO,CAAC,IAAI,CAAC,UAAS,GAAG,CAAE,GAC3B,OAAO,CAAC,aAAa,iBAAiB,CAAE,GAAE,CAAE;YAErD,MAAM,EAAE,oBAAoB,EAAG,IAAI,CAAE,QAAQ,EAAG,SAAS,GACrD,kBAAkB,CAAC,UAAU,CAAC,CAAG,OAC1B,CAAC,EAAG,kBAAkB,MACtB,EAAE,EAAG,kBAAkB,KAC9B,SAAS,GAAK,QAAQ,GAAG,CAAE,IAAG,CAAG;QACzC,CAAC,EACA,IAAI,CAAC,CAAI,KAAG,wCAAwC;IAC7D,CAAC;;AAGL,yBAAc,GAAG,kDAA4B","sources":["libs/generate-exports-webpack-plugin/src/index.ts"],"sourcesContent":["import chokidar from 'chokidar'\r\nimport path from 'path'\r\nimport fs from 'fs/promises'\r\nimport globby from 'globby'\r\nimport { Options, PluginOptions } from './types'\r\n\r\nclass GenerateExportsWebpackPlugin {\r\n    defaultOptions: PluginOptions = {\r\n        omitExtension: true,\r\n        omitSemi: false,\r\n        singleQuote: true,\r\n        filename: 'index.js',\r\n        include: [],\r\n        exclude: [],\r\n        directories: [],\r\n    }\r\n\r\n    options!: PluginOptions\r\n\r\n    constructor(options = {}) {\r\n        this.options = { ...this.defaultOptions, ...options }\r\n    }\r\n\r\n    apply() {\r\n        this.options.directories.forEach((directoryConfig) => {\r\n            const directoryConfigIsArray = Array.isArray(directoryConfig)\r\n            let directory = directoryConfigIsArray\r\n                ? directoryConfig[0]\r\n                : directoryConfig\r\n            const options = directoryConfigIsArray\r\n                ? { ...this.defaultOptions, ...(directoryConfig[1] || this.options) }\r\n                : this.options\r\n            if (!path.isAbsolute(directory)) directory = path.resolve(directory)\r\n            if (process.env.NODE_ENV === 'production') {\r\n                return this.generateIndex(directory, options)\r\n            }\r\n            const watcher = chokidar.watch(options.include, {\r\n                ignored: /^\\./,\r\n                cwd: directory,\r\n            })\r\n\r\n            watcher\r\n                .on('add', (filePath) =>\r\n                    this.handleFileChange(filePath, directory, options),\r\n                )\r\n                .on('unlink', (filePath) =>\r\n                    this.handleFileChange(filePath, directory, options),\r\n                )\r\n                .on('ready', () => this.handleFileChange('', directory, options))\r\n        })\r\n    }\r\n\r\n    handleFileChange(filePath: string, directory, options) {\r\n        if (filePath !== path.join(directory, options.filename)) {\r\n            this.generateIndex(directory, options)\r\n        }\r\n    }\r\n\r\n    btfs(path: string): string {\r\n        return path.replace(/\\\\/g, '/')\r\n    }\r\n\r\n    async fileExists(path: string) {\r\n        return !!(await fs.stat(path).catch((e) => false))\r\n    }\r\n\r\n    generateIndex(directory: string, options: PluginOptions | Options) {\r\n        if (!path.isAbsolute(directory)) directory = path.resolve(directory)\r\n        const { btfs } = this\r\n        const { filename, include, exclude } = options\r\n        const indexPath = btfs(path.join(directory, filename))\r\n        globby(include, {\r\n            cwd: directory,\r\n            ignore: exclude,\r\n        })\r\n            .then((files) => {\r\n                const indexTemplate = this.getTemplate(directory, options, files)\r\n                return this.fileExists(indexPath)\r\n                    .then(async (exists) => {\r\n                        if (exists) {\r\n                            const fileContent = await fs.readFile(indexPath, 'utf8')\r\n                            if (fileContent === indexTemplate)\r\n                                return Promise.reject('Contents are identical.')\r\n                        }\r\n                        return fs.mkdir(path.parse(indexPath).dir, { recursive: true })\r\n                    })\r\n                    .then(() => fs.writeFile(indexPath, indexTemplate))\r\n            })\r\n            .catch(() => {\r\n            })\r\n    }\r\n\r\n    getTemplate(\r\n        directory: string,\r\n        options: PluginOptions | Options,\r\n        files: string[],\r\n    ) {\r\n        const { btfs } = this\r\n        const { omitExtension, omitSemi, singleQuote } = options\r\n        const quoteType = singleQuote ? \"'\" : '\"'\r\n        return `/**\r\n* This file is auto-generated by GenerateExportsWebpackPlugin.\r\n* Check this file into source control.\r\n* Do not edit this file.\r\n*/\\n${ files\r\n            .sort((a, b) => a.localeCompare(b))\r\n            .map((filePath) => {\r\n                const { name } = path.parse(filePath)\r\n                const exportRelativePath = btfs(\r\n                    btfs(filePath)\r\n                        .replace(btfs(directory), '')\r\n                        .replace(omitExtension ? /\\.[^/.]+$/ : '', ''),\r\n                )\r\n                return `export { default as ${ name } } from ${ quoteType }${\r\n                    exportRelativePath.startsWith('/')\r\n                        ? `.${ exportRelativePath }`\r\n                        : `./${ exportRelativePath }`\r\n                }${ quoteType }${ omitSemi ? '' : ';' }`\r\n            })\r\n            .join('\\n') }\\n/* End of auto-generated content. */\\n`\r\n    }\r\n}\r\n\r\nmodule.exports = GenerateExportsWebpackPlugin\r\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../../../"}
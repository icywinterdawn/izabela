var $lWZZX$chokidar = require("chokidar");
var $lWZZX$path = require("path");
var $lWZZX$fspromises = require("fs/promises");
var $lWZZX$globby = require("globby");

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}




class $fd49ddfa76b1bd76$var$GenerateExportsWebpackPlugin {
    constructor(options1 = {
    }){
        this.defaultOptions = {
            omitExtensionInExportPath: true,
            filename: 'index.js',
            include: [],
            exclude: [],
            directories: []
        };
        this.options = {
            ...this.defaultOptions,
            ...options1
        };
    }
    apply() {
        this.options.directories.forEach((directoryConfig)=>{
            const directoryConfigIsArray = Array.isArray(directoryConfig);
            let directory = directoryConfigIsArray ? directoryConfig[0] : directoryConfig;
            let options = directoryConfigIsArray ? {
                ...this.defaultOptions,
                ...directoryConfig[1] || this.options
            } : this.options;
            if (!($parcel$interopDefault($lWZZX$path)).isAbsolute(directory)) directory = ($parcel$interopDefault($lWZZX$path)).resolve(directory);
            const watcher = ($parcel$interopDefault($lWZZX$chokidar)).watch(options.include, {
                ignored: /^\./,
                cwd: directory
            });
            watcher.on('add', (filePath)=>this.handleFileChange(filePath, directory, options)
            ).on('unlink', (filePath)=>this.handleFileChange(filePath, directory, options)
            ).on('ready', ()=>this.handleFileChange('', directory, options)
            );
        });
    }
    handleFileChange(filePath1, directory, options) {
        if (filePath1 !== ($parcel$interopDefault($lWZZX$path)).join(directory, options.filename)) this.generateIndex(directory, options);
    }
    btfs(path) {
        return path.replace(/\\/g, '/');
    }
    async fileExists(path1) {
        return !!await ($parcel$interopDefault($lWZZX$fspromises)).stat(path1).catch((e)=>false
        );
    }
    generateIndex(directory1, options2) {
        if (!($parcel$interopDefault($lWZZX$path)).isAbsolute(directory1)) directory1 = ($parcel$interopDefault($lWZZX$path)).resolve(directory1);
        const { btfs: btfs  } = this;
        const { filename: filename , include: include , exclude: exclude  } = options2;
        const indexPath = btfs(($parcel$interopDefault($lWZZX$path)).join(directory1, filename));
        ($parcel$interopDefault($lWZZX$globby))(include, {
            cwd: directory1,
            ignore: exclude
        }).then((files)=>{
            const indexTemplate = this.getTemplate(directory1, options2, files);
            return this.fileExists(indexPath).then(async (exists)=>{
                if (exists) {
                    const fileContent = await ($parcel$interopDefault($lWZZX$fspromises)).readFile(indexPath, 'utf8');
                    if (fileContent === indexTemplate) return Promise.reject('Contents are identical.');
                }
                return ($parcel$interopDefault($lWZZX$fspromises)).mkdir(($parcel$interopDefault($lWZZX$path)).parse(indexPath).dir, {
                    recursive: true
                });
            }).then(()=>($parcel$interopDefault($lWZZX$fspromises)).writeFile(indexPath, indexTemplate)
            );
        }).catch(()=>{
        });
    }
    getTemplate(directory2, options3, files) {
        const { btfs: btfs  } = this;
        const { omitExtensionInExportPath: omitExtensionInExportPath  } = options3;
        return `/**
  * This file is auto-generated by GenerateIndexWebpackPlugin.
  * Check this file into source control.
  * Do not edit this file.
  */\n${files.map((filePath)=>{
            const { name: name  } = ($parcel$interopDefault($lWZZX$path)).parse(filePath);
            const exportRelativePath = btfs(btfs(filePath).replace(btfs(directory2), '').replace(omitExtensionInExportPath ? /\.[^/.]+$/ : '', ''));
            return `export { default as ${name} } from '${exportRelativePath.startsWith('/') ? '.' + exportRelativePath : './' + exportRelativePath}';`;
        }).join('\n')}\n/* End of auto-generated content. */\n`;
    }
}
module.exports = $fd49ddfa76b1bd76$var$GenerateExportsWebpackPlugin;


//# sourceMappingURL=index.js.map
